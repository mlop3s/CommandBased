trigger:
- master  # Adjust this to your default branch

pool:
  name: 'Azure Pipelines'
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  azureSubscription: 'OllisAzure'
  appName: 'webapplom'
  resourceGroupName: 'lomazrg'
  zipFileName: 'docs_$(Build.BuildId).zip'
  zipFilePath: '$(Build.ArtifactStagingDirectory)/$(zipFileName)'
  storageAccountName: 'azlomsa '
  containerName: 'documentation'
  blobName: '$(zipFileName)'  

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: 8.x
    installationPath: $(Agent.ToolsDirectory)/dotnet
    performMultiLevelLookup: true

- task: DotNetCoreCLI@2
  displayName: 'Restore Nuget Packages'
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: 'nameofyourfeed'
    includeNuGetOrg: true
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish'

- script: |
    dotnet tool install -g docfx
    echo '##vso[task.prependpath]$(Agent.ToolsDirectory)/dotnet/tools'
  displayName: 'Install DocFX'

- script: |
    docfx --version
  displayName: 'Verify DocFX Installation'

- script: |
    docfx CommandLineWebApp/docfx.json
  displayName: 'Generate Documentation'
  env:
    PATH: $(PATH):$(HOME)/.dotnet/tools
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'CommandLineWebApp/_site'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: $(zipFilePath)
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish/CommandLineWebApp.zip'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: AzureWebApp@1
  inputs:
    azureSubscription: $(azureSubscription)
    appName: $(appName)
    package: '$(Build.ArtifactStagingDirectory)/publish/CommandLineWebApp.zip'
    resourceGroupName: $(resourceGroupName)
    appType: 'webAppLinux'

- script: |
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    sudo apt-add-repository https://cli.github.com/packages
    sudo apt update
    sudo apt install gh
  displayName: 'Install GitHub CLI'

- script: |
    git config --global user.name 'github-actions[bot]'
    git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    git remote set-url origin https://$(GITHUB_PAT)@github.com/mlop3s/devopsbackup.git
    git add .
    git commit -m "Automated commit"
    git push origin main
  displayName: 'Commit and Push Changes'
  env:
    GITHUB_PAT: $(GITHUB_PAT)