trigger:
- master  # Adjust this to your default branch

pool:
  name: 'Azure Pipelines'
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  azureSubscription: 'OllisAzure'
  azureLocation: 'Germany West Central'
  appServicePlan:'ASP-LomAzRG-bd9c (B1: 1)'
  appSku: 'B1'
  appName: 'webapplom'
  resourceGroupName: 'lomazrg'
  zipFileName: 'docs_$(Build.BuildId).zip'
  zipFilePath: '$(Build.ArtifactStagingDirectory)/$(zipFileName)'
  storageAccountName: 'azlomsa '
  containerName: 'documentation'
  blobName: '$(zipFileName)'
  websiteUrl: 'https://webapplom.azurewebsites.net'

steps:
- task: AzureCLI@2
  displayName: 'Check if App has been compromised and delete if needed'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    arguments: >
      -resourceGroupName $(resourceGroupName)
      -appName $(appName)
    inlineScript: |
      # Check the status of the web app
      STATUS=$(az webapp show --resource-group $(resourceGroupName) --name $(appName) --query "state" -o tsv)
      if [ "$STATUS" != "Running" ]; then
        echo "Web app is malfunctioning. Deleting the web app..."
        az webapp delete --resource-group $(resourceGroupName) --name $(appName) 
        echo "##vso[task.setvariable variable=webAppDeleted]true"
      else
        echo "Web app is running. No need to delete."
      fi

- task: AzureCLI@2
  condition: eq(variables['webAppDeleted'], 'true')
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    arguments: >
      -resourceGroupName $(resourceGroupName)
      -resourceGroupLocation $(resourceGroupLocation)
    inlineScript: |
      if ! az group exists --name $(resourceGroupName); then
        az group create --name $(resourceGroupName) --location $(resourceGroupLocation)
      fi
  displayName: 'Ensure Resource Group Exists'

- task: AzureCLI@2
  displayName:  'Create appservice plan if missing'
  condition: eq(variables['webAppDeleted'], 'true')
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    arguments: >
      -resourceGroupName $(resourceGroupName)
      -appServicePlan $(appServicePlan)
      -azureLocation $(azureLocation)
      -appSku $(appSku)
    inlineScript: |
      # Check if the service plan exists
      echo $(resourceGroupName)
      echo $(appServicePlan)
      echo $(azureLocation)
      echo $(appSku)
      
      SERVICE_PLAN_EXISTS=$(az appservice plan show --name $(appServicePlan) --resource-group  $(resourceGroupName) --query "name" --output tsv)

      if [ -z "$SERVICE_PLAN_EXISTS" ]; then
        echo "Service plan does not exist. Creating service plan..."
        az appservice plan create --name $(appServicePlan) --resource-group $(resourceGroupName) --location $(azureLocation)) --sku $(appSku) --is-linux
      else
        echo "Service plan already exists."
      fi

- task: AzureResourceGroupDeployment@2
  condition: eq(variables['webAppDeleted'], 'true')
  inputs:
    azureSubscription: $(azureSubscription)
    action: 'Create Or Update Resource Group'
    resourceGroupName: $(resourceGroupName)
    location: $(azureLocation)
    templateLocation: 'Linked artifact'
    csmFile: '$(System.DefaultWorkingDirectory)/CommandLineWebApp/template.json'
    csmParametersFile: '$(System.DefaultWorkingDirectory)/CommandLineWebApp/Devops/parameters.json'

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: 8.x
    installationPath: $(Agent.ToolsDirectory)/dotnet
    performMultiLevelLookup: true

- task: DotNetCoreCLI@2
  displayName: 'Restore Nuget Packages'
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: 'nameofyourfeed'
    includeNuGetOrg: true
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish'

- script: |
    dotnet tool install -g docfx
    echo '##vso[task.prependpath]$(Agent.ToolsDirectory)/dotnet/tools'
  displayName: 'Install DocFX'

- script: |
    docfx --version
  displayName: 'Verify DocFX Installation'

- script: |
    docfx CommandLineWebApp/docfx.json
  displayName: 'Generate Documentation'
  env:
    PATH: $(PATH):$(HOME)/.dotnet/tools
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'CommandLineWebApp/_site'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: $(zipFilePath)
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish/CommandLineWebApp.zip'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: AzureWebApp@1
  inputs:
    azureSubscription: $(azureSubscription)
    appName: $(appName)
    package: '$(Build.ArtifactStagingDirectory)/publish/CommandLineWebApp.zip'
    resourceGroupName: $(resourceGroupName)
    appType: 'webAppLinux'

- script: |
    if curl -s --head  --request GET $(websiteUrl) | grep "200 OK" > /dev/null; then 
      echo "Website is up"
    else
      echo "Website is down"
      exit 1
    fi
  displayName: 'Ping Website'

- script: |
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    sudo apt-add-repository https://cli.github.com/packages
    sudo apt update
    sudo apt install gh
  displayName: 'Install GitHub CLI'

- script: |
    git clone https://mlop3s:$(GITHUB_PAT)@github.com/mlop3s/devopsbackup.git
  displayName: 'Clone'
  env:
    GITHUB_PAT: $(GITHUB_PAT)

- task: CopyFiles@2
  inputs:
    SourceFolder: $(Build.ArtifactStagingDirectory)
    Contents: $(zipFileName) # You can use wildcards like '**/*.txt' to copy multiple files
    TargetFolder: 'devopsbackup'
  displayName: 'Copy file to target folder'

- script: |
    echo "Running script in the src folder"
    git config --global user.name 'github-actions[bot]'
    git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    git add .
    git status
    git commit -m "Automated Commit"
    git push
  displayName: 'Run script in src folder'
  workingDirectory: 'devopsbackup'
  